# Generated by Django 5.1.7 on 2025-04-12 13:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=50, unique=True, verbose_name='Никнейм')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1, verbose_name='Пол')),
                ('bio', models.TextField(blank=True, verbose_name='О себе')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Страна')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Город')),
                ('language', models.CharField(default='Русский', max_length=50, verbose_name='Язык')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Последний вход')),
                ('followers', models.ManyToManyField(blank=True, related_name='following', to=settings.AUTH_USER_MODEL, verbose_name='Подписчики')),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Друзья')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(verbose_name='Широта')),
                ('longitude', models.FloatField(verbose_name='Долгота')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('point_type', models.CharField(choices=[('restaurant', 'Ресторан'), ('hotel', 'Отель'), ('waterfall', 'парк'), ('monument', 'Достопримечательность'), ('other', 'Другое')], default='other', max_length=20, verbose_name='Тип точки')),
                ('country', models.CharField(max_length=100, verbose_name='Страна')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(max_length=200, verbose_name='Улица')),
                ('house', models.CharField(blank=True, max_length=20, verbose_name='Дом')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Подтвержденная локация')),
                ('working_hours', models.JSONField(blank=True, default=dict, help_text='JSON-структура с расписанием', verbose_name='График работы')),
                ('min_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Минимальная цена')),
                ('max_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Максимальная цена')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Фото/видео в формате JSON', verbose_name='Метаданные')),
                ('visits', models.PositiveIntegerField(default=0, verbose_name="Отметок 'здесь был'")),
                ('rating', models.FloatField(default=0, verbose_name='Рейтинг')),
                ('status', models.BooleanField(default=True, verbose_name='Публичный статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_points', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Точка интереса',
                'verbose_name_plural': 'Точки интереса',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('country', models.CharField(max_length=100, verbose_name='Страна')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(blank=True, max_length=200, verbose_name='Улица')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('difficulty', models.PositiveIntegerField(help_text='От 1 до 5', verbose_name='Уровень сложности')),
                ('min_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Минимальная цена')),
                ('max_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Максимальная цена')),
                ('rating', models.FloatField(default=0, verbose_name='Рейтинг')),
                ('completions', models.PositiveIntegerField(default=0, verbose_name='Пройдено раз')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Метаданные')),
                ('status', models.BooleanField(default=True, verbose_name='Публичный статус')),
                ('duration', models.DurationField(verbose_name='Время прохождения')),
                ('distance', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Протяженность (км)')),
                ('activity_type', models.CharField(choices=[('walking', 'Пеший'), ('cycling', 'Велосипедный'), ('driving', 'Автомобильный')], default='walking', max_length=20, verbose_name='Тип активности')),
                ('categories', models.ManyToManyField(to='core.category', verbose_name='Категории')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_routes', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('end_point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='end_routes', to='core.point', verbose_name='Конечная точка')),
                ('start_point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='start_routes', to='core.point', verbose_name='Начальная точка')),
                ('tags', models.ManyToManyField(blank=True, to='core.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Маршрут',
                'verbose_name_plural': 'Маршруты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='point',
            name='routes',
            field=models.ManyToManyField(blank=True, related_name='points', to='core.route', verbose_name='Маршруты'),
        ),
        migrations.AddField(
            model_name='point',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.tag', verbose_name='Теги'),
        ),
    ]
